openapi: 3.0.1
info:
  title: Variable API
  description: This is the Variable API
  version: 1.1.0

servers:
  - url: https://app.variable.global/api

paths:
  /auth/token:
    post:
      summary: Get a token
      security:
        - basicAuth: [ ]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
              default: client_credentials
              properties:
                grant_type:
                  type: string
                  description: client_credentials
                  example: client_credentials
      responses:
        '200':
          description: A token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
  /v1/activity:
    get:
      summary: Get high level activity data
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/variable-company'
        - $ref: '#/components/parameters/date'
        - $ref: '#/components/parameters/startDate'
        - $ref: '#/components/parameters/endDate'
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/scope'
        - $ref: '#/components/parameters/taxonomy'
        - $ref: '#/components/parameters/list'
      responses:
        '200':
          description: A list of activities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityResponse'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/activity/data:
    get:
      summary: Get high level activity data with a list of activities
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/variable-company'
        - $ref: '#/components/parameters/date'
        - $ref: '#/components/parameters/startDate'
        - $ref: '#/components/parameters/endDate'
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/scope'
        - $ref: '#/components/parameters/taxonomy'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: A list of activities
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - $ref: '#/components/schemas/ActivityResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Activity'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/material:
    get:
      summary: Get a list of materials
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/variable-company'
      responses:
        '200':
          description: A list of materials
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Material'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    post:
      summary: Create a material
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              allOf:
                - $ref: '#/components/schemas/NewProduct'
      responses:
        '200':
          description: A material
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/material/:uuid:
    get:
      summary: Get a material by UUID
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/variable-company'
      responses:
        '200':
          description: A material
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    patch:
      summary: Edit a material
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - uuid
              allOf:
                - $ref: '#/components/schemas/EditProduct'
      responses:
        '200':
          description: A material
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    delete:
      summary: Delete a material
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/product:
    get:
      summary: Get a list of products
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/variable-company'
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'

        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    post:
      summary: Create a product
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              allOf:
                - $ref: '#/components/schemas/NewProduct'
      responses:
        '200':
          description: A product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/product/:uuid:
    get:
      summary: Get a product by UUID
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/variable-company'
      responses:
        '200':
          description: A product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    patch:
      summary: Edit a product
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - uuid
              allOf:
                - $ref: '#/components/schemas/EditProduct'
      responses:
        '200':
          description: A product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/model/:uuid/input:
    get:
      summary: Get model inputs
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/variable-company'
      responses:
        '200':
          description: A list of model inputs
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ReturnedInput'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    post:
      summary: Create a model input
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/NewInput'
      responses:
        '200':
          description: An input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnedInput'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/model/:uuid/input/:uuid:
    patch:
      summary: Edit an input
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - uuid
              allOf:
                - $ref: '#/components/schemas/EditInput'
      responses:
        '200':
          description: An input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnedInput'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    delete:
      summary: Delete a model input
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/scope:
    get:
      summary: Get a list of scopes
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/variable-company'
      responses:
        '200':
          description: A list of scopes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scope'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/taxonomy:
    get:
      summary: Get a list of taxonomies
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/variable-company'
      responses:
        '200':
          description: A list of taxonomies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Taxonomy'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/org:
    get:
      summary: Get a list of orgs
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/variable-company'
      responses:
        '200':
          description: A list of orgs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Org'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/unit:
    get:
      summary: Get a list of units
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/variable-company'
      responses:
        '200':
          description: A list of units
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    oAuthNoScopes:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /auth/token
          scopes: { }
  parameters:
    variable-company:
      name: Variable-Company
      in: header
      description: __Required__ if you aren't using the company subdomain. You can get the UUID and company api url from the [company settings](https://app.variable.global/company) page in the app.
      required: false
      schema:
        type: string
        example: aa17223a-471c-4eb7-9ff5-7800fd023960
    date:
      name: date
      in: query
      description: 'Date to query (e.g. 2021-01-01, 2021-12, 2021)'
      required: false
      schema:
        type: string
        example: 2021-01
    startDate:
      name: sd
      in: query
      description: Start date
      required: false
      schema:
        type: string
        example: '2021-01-01'
    endDate:
      name: ed
      in: query
      description: End date
      required: false
      schema:
        type: string
        example: '2021-01-31'
    org:
      name: org
      in: query
      description: The org UUID
      required: false
      schema:
        type: string
        example: aa17223a-471c-4eb7-9ff5-7800fd023960
    scope:
      name: scope
      in: query
      description: The scope UUID
      required: false
      schema:
        type: string
        example: aa17223a-471c-4eb7-9ff5-7800fd023960
    taxonomy:
      name: taxonomy
      in: query
      description: The taxonomy UUID
      required: false
      schema:
        type: string
        example: aa17223a-471c-4eb7-9ff5-7800fd023960
    list:
      name: list
      in: query
      description: List of Scope, Org, or Taxonomies used in the result set
      required: false
      schema:
        type: array
        items:
          type: string
          example: scopes,orgs,taxonomies
    limit:
      name: limit
      in: query
      description: Limit the number of results
      required: false
      schema:
        type: integer
        example: 100
    page:
      name: page
      in: query
      description: The page number
      required: false
      schema:
        type: integer
        example: 1
  schemas:
    Authorization:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
        scope:
          type: string
    UnauthorizedResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Unauthorized'
    ExpiredTokenResponse:
      type: object
      properties:
        message:
          type: string
          example: 'token expired'
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Success'
    ListResponse:
      type: object
      properties:
        count:
          type: integer
          example: 1500
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 100
        data:
          type: array
          items:
            $ref: '#/components/schemas/IDAndName'
    ActivityResponse:
      type: object
      properties:
        count:
          type: integer
          example: 1500
        queryString:
          type: string
          description: The query string used to filter the activities
          example: date=2021-01
        startDate:
          type: string
          description: ISO 8601 date
          example: 2021-01-01T00:00:00Z
        endDate:
          type: string
          description: ISO 8601 date
          example: 2021-01-31T23:59:59Z
        CO2e:
          type: string
          description: The total CO2e of all activities categorized to a GHG Scope, in `CO2eUnit`
          example: '1234.5678'
        uncategorizedCO2e:
          type: string
          description: The total CO2e of all activities *not* categorized to a GHG Scope, in `CO2eUnit`
          example: '1.2345678'
        CO2eUnit:
          type: string
          description: The unit of CO2e. For example "kg"
          example: kg
        scopes:
          description: A list of GHG Scopes used in the result set
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        orgs:
          description: A list of Orgs used in the result set
          type: array
          items:
            $ref: '#/components/schemas/Org'
        taxonomies:
          description: A list of Taxonomies used in the result set
          type: array
          items:
            $ref: '#/components/schemas/Taxonomy'
    UUID:
      type: string
      format: UUID
    IDAndName:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: 'Name'
    CreatedUpdated:
      type: object
      properties:
        created:
          type: string
          description: ISO 8601 date
          example: 2021-01-01T00:00:00Z
        updated:
          type: string
          description: ISO 8601 date
          example: 2021-01-31T23:59:59Z
    BaseNode:
      allOf:
        - $ref: '#/components/schemas/IDAndName'
        - $ref: '#/components/schemas/CreatedUpdated'
    Date:
      type: string
      description: ISO 8601 date
      example: 2021-01-01T00:00:00Z
    StartEndDate:
      allOf:
        - properties:
            startDate:
              $ref: '#/components/schemas/Date'
            endDate:
              $ref: '#/components/schemas/Date'
    Footprints:
      type: object
      properties:
        CO2e:
          type: object
          properties:
            productCarbonFootprint:
              type: string
              example: '1234.5678'
            upstream:
              type: string
              example: '123'
            direct:
              type: string
              example: '4.5'
            downstream:
              type: string
              example: '0.0678'
            A1-A3:
              type: string
              example: '1234'
            A1:
              type: string
              example: '1200'
            A2:
              type: string
              example: '30'
            A3:
              type: string
              example: '4'
            A4:
              type: string
              example: '0.5'
            B1:
              type: string
              example: '0.06'
            B2:
              type: string
              example: '0.007'
            B3:
              type: string
              example: '0.0008'
            B4:
              type: string
              example: ''
            B5:
              type: string
              example: ''
            C1:
              type: string
              example: ''
            C2:
              type: string
              example: ''
            C3:
              type: string
              example: ''
            C4:
              type: string
              example: ''
            D:
              type: string
              example: ''
    Activity:
      allOf:
        - $ref: '#/components/schemas/BaseNode'
        - type: object
          properties:
            description:
              type: string
            quantity:
              type: number
              example: 150
            unit:
              type: string
              example: 'kg'
            CO2e:
              type: string
              example: '1234.5678'
            UpstreamCO2e:
              type: string
              example: '1234.5'
            DownstreamCO2e:
              type: string
              example: '0.0678'
            product:
              properties:
                uuid:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                  example: 'Product Name'
            scope:
              properties:
                uuid:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                  example: 'Scope 2: Electricity'
            taxonomy:
              properties:
                uuid:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                  example: 'Material'
            org:
              properties:
                uuid:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                  example: 'Org Unit'
        - $ref: '#/components/schemas/StartEndDate'
    NewProduct:
      allOf:
        - type: object
          properties:
            name:
              type: string
              example: 'Product Name'
            description:
              type: string
              example: 'A descriptive description'
            sku:
              type: string
              example: 'SKU123'
            cpcCode:
              type: string
              example: 'CPC123'
            taxonomy:
              properties:
                uuid:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                  example: 'Material'
            geoLocation:
              properties:
                uuid:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                  example: 'Pittsburgh, PA'
            location:
              properties:
                uuid:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                  example: 'Pittsburgh Office'
        - $ref: '#/components/schemas/StartEndDate'
    EditProduct:
      allOf:
        - properties:
            uuid:
              $ref: '#/components/schemas/UUID'
        - $ref: '#/components/schemas/NewProduct'
    Product:
      allOf:
        - $ref: '#/components/schemas/EditProduct'
        - type: object
          properties:
            productImage:
              type: string
              example: 'https://app.variable.global/uploads/image.jpg'
            footprints:
              $ref: '#/components/schemas/Footprints'
            qualitySummary:
              $ref: '#/components/schemas/QualitySummary'
            qualityRating:
              $ref: '#/components/schemas/QualityRating'
        - $ref: '#/components/schemas/CreatedUpdated'
    Material:
      allOf:
        - $ref: '#/components/schemas/Product'
        - properties:
            name:
              type: string
              example: 'Material Name'
            supplier:
              $ref: '#/components/schemas/Company'
    Company:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: 'Company Name'
    NewInput:
      properties:
        quantity:
          type: number
          example: 150
        unit:
          type: string
          example: 'kg'
        order:
          type: number
          example: 1
        material:
          properties:
            uuid:
              $ref: '#/components/schemas/UUID'
            name:
              type: string
              example: 'Material name'
        block:
          properties:
            uuid:
              $ref: '#/components/schemas/UUID'
            name:
              type: string
              example: 'Block name'
        lifecycleStage:
          $ref: '#/components/schemas/LifecycleStage'
    EditInput:
      allOf:
        - properties:
            uuid:
              $ref: '#/components/schemas/UUID'
        - $ref: '#/components/schemas/NewInput'
    ReturnedInput:
      allOf:
        - $ref: '#/components/schemas/EditInput'
        - $ref: '#/components/schemas/CreatedUpdated'
        - properties:
            CO2e:
              type: string
              example: '1234.5678'
    Block:
      allOf:
        - $ref: '#/components/schemas/BaseNode'
        - type: object
          properties:
            sources:
              type: array
              items:
                $ref: '#/components/schemas/Product'
    LifecycleStage:
      type: object
      properties:
        code:
          type: string
          example: A1
        name:
          type: string
          example: 'Materials'
    Scope:
      type: object
      properties:
        uuid:
          type: string
          format: UUID
        name:
          type: string
          example: 'Scope 2: Electricity'
    Taxonomy:
      type: object
      properties:
        uuid:
          type: string
          format: UUID
        name:
          type: string
          example: 'Electricity'
        slug:
          type: string
          example: 'electricity'
        path:
          type: string
          example: 'energy/electricity'
    Unit:
      type: object
      properties:
        code:
          type: string
          example: "kg"
        name:
          type: string
          example: 'Kilogram'
        type:
          type: string
          example: 'weight'
    Org:
      type: object
      properties:
        uuid:
          type: string
          format: UUID
        name:
          type: string
          example: 'Org Unit'
    Location:
      type: object
      properties:
        uuid:
          type: string
          format: UUID
        name:
          type: string
          example: 'Pittsburgh Office'
        type:
          type: string
          example: 'office'
        geoLocation:
          $ref: '#/components/schemas/GeoLocation'
    GeoLocation:
      type: object
      properties:
        uuid:
          type: string
          format: UUID
        shortName:
          type: string
          example: 'Pittsburgh'
        googleMapsId:
          type: string
          example: 'ChIJA4UGSG_xNIgRNBuiWqEV-Y0'
        locationType:
          type: string
          example: 'APPROXIMATE'
        formattedAddress:
          type: string
          example: 'Pittsburgh, PA, USA'
        countryCode:
          type: string
          example: 'US'
        latitude:
          type: number
          example: 40.44062479
        longitude:
          type: number
          example: -79.9958864
        bounds:
          type: object
          properties:
            northeast:
              $ref: '#/components/schemas/LatLon'
            southwest:
              $ref: '#/components/schemas/LatLon'
    LatLon:
      type: object
      properties:
        latitude:
          type: number
          example: 40.44062479
        longitude:
          type: number
          example: -79.9958864
    QualitySummary:
      type: object
      properties:
        documentationYear:
          type: string
          example: 2021
        temporalRepresentativeness:
          type: number
          example: 1
          description: This is calculated based on the documentationYear (1 = this year, 2 = last 4 years, 3 = 5+ years)
        dataCompleteness:
          type: number
          example: 1
        dataReliability:
          type: number
          example: 1
        geographicalRepresentativeness:
          type: number
          example: 1
        technologicalRepresentativeness:
          type: number
          example: 1
        specificPercent:
          type: number
          example: 40
        averagePercent:
          type: number
          example: 60
    QualityRating:
      type: number
      example: 2.2

security:
  - basicAuth: [ ]
  - bearerAuth: [ ]
  - oAuthNoScopes: [ ]
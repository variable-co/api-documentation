openapi: 3.0.1
info:
  title: Variable API
  description: This is the Variable API
  version: 1.1.0

servers:
  - url: https://app.variable.global/api

paths:
  /auth/token:
    post:
      summary: Get a token
      security:
        - basicAuth: [ ]
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
              default: client_credentials
              properties:
                grant_type:
                  type: string
                  description: client_credentials
                  example: client_credentials
      responses:
        '200':
          description: A token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
  /v1/activity:
    get:
      summary: Get high level activity data
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/date'
        - $ref: '#/components/parameters/startDate'
        - $ref: '#/components/parameters/endDate'
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/scope'
        - $ref: '#/components/parameters/taxonomy'
        - $ref: '#/components/parameters/list'
      responses:
        '200':
          description: A list of activities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityResponse'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/activity/data:
    get:
      summary: Get high level activity data with a list of activities
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/date'
        - $ref: '#/components/parameters/startDate'
        - $ref: '#/components/parameters/endDate'
        - $ref: '#/components/parameters/org'
        - $ref: '#/components/parameters/scope'
        - $ref: '#/components/parameters/taxonomy'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: A list of activities
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - $ref: '#/components/schemas/ActivityResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Activity'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/search:
    get:
      summary: Get a list of database footprints
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/searchTerm'
        - $ref: '#/components/parameters/unitType'
        - $ref: '#/components/parameters/taxonomy'
        - $ref: '#/components/parameters/source'
      responses:
        '200':
          description: A list of database footprints
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Material'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/material:
    get:
      summary: Get a list of materials
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of materials
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Material'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    post:
      summary: Create a material
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              allOf:
                - $ref: '#/components/schemas/NewProduct'
      responses:
        '200':
          description: A material
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/material/:uuid:
    get:
      summary: Get a material by UUID
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A material
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    patch:
      summary: Edit a material
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - uuid
              allOf:
                - $ref: '#/components/schemas/EditProduct'
      responses:
        '200':
          description: A material
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    delete:
      summary: Delete a material
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/supplier:
    get:
      summary: Get a list of suppliers
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of suppliers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Supplier'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    post:
      summary: Create a supplier
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              allOf:
                - $ref: '#/components/schemas/NewSupplier'
      responses:
        '200':
          description: A supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/supplier/:uuid:
    get:
      summary: Get a supplier by UUID
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    patch:
      summary: Edit a supplier
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - uuid
              allOf:
                - $ref: '#/components/schemas/NewSupplier'
      responses:
        '200':
          description: A supplier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    delete:
      summary: Delete a supplier
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/product:
    get:
      summary: Get a list of products
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'

        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    post:
      summary: Create a product
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              allOf:
                - $ref: '#/components/schemas/NewProduct'
      responses:
        '200':
          description: A product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/product/:uuid:
    get:
      summary: Get a product by UUID
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    patch:
      summary: Edit a product
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - uuid
              allOf:
                - $ref: '#/components/schemas/EditProduct'
      responses:
        '200':
          description: A product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    delete:
      summary: Delete a Product
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/model/:uuid/input:
    get:
      summary: Get model inputs
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of model inputs
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ReturnedInput'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    post:
      summary: Create a model input
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/NewInput'
      responses:
        '200':
          description: An input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnedInput'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/model/:uuid/input/:uuid:
    patch:
      summary: Edit an input
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - uuid
              allOf:
                - $ref: '#/components/schemas/EditInput'
      responses:
        '200':
          description: An input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnedInput'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
    delete:
      summary: Delete a model input
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/scope:
    get:
      summary: Get a list of scopes
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of scopes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scope'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/taxonomy:
    get:
      summary: Get a list of taxonomies
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of taxonomies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Taxonomy'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/org:
    get:
      summary: Get a list of orgs
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of orgs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Org'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /v1/unit:
    get:
      summary: Get a list of units
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of units
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /pact/2/footprint/:id:
    get:

      summary: Get a Product Carbon Footprint
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A Product Carbon Footprint
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PactProductFootprint'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'
  /pact/2/footprints:
    get:
      summary: Get a list of database footprints
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of Product Carbon Footprints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PactListResponse'
        '401':
          description: ExpiredToken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredTokenResponse'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    oAuthNoScopes:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /auth/token
          scopes: { }
  parameters:
    date:
      name: date
      in: query
      description: 'Date to query (e.g. 2021-01-01, 2021-12, 2021)'
      required: false
      schema:
        type: string
        example: 2021-01
    startDate:
      name: sd
      in: query
      description: Start date
      required: false
      schema:
        type: string
        example: '2021-01-01'
    endDate:
      name: ed
      in: query
      description: End date
      required: false
      schema:
        type: string
        example: '2021-01-31'
    searchTerm:
      name: q
      in: query
      description: The search term
      required: false
      schema:
        type: string
        example: 'plastic'
    unitType:
      name: unitType
      in: query
      description: The unit type
      required: false
      schema:
        type: string
        example: 'volume'
    source:
      name: source
      in: query
      description: The UUID of the supplier, database, etc.
      required: false
      schema:
        type: string
        example: aa17223a-471c-4eb7-9ff5-7800fd023960
    org:
      name: org
      in: query
      description: The org UUID
      required: false
      schema:
        type: string
        example: aa17223a-471c-4eb7-9ff5-7800fd023960
    scope:
      name: scope
      in: query
      description: The scope UUID
      required: false
      schema:
        type: string
        example: aa17223a-471c-4eb7-9ff5-7800fd023960
    taxonomy:
      name: taxonomy
      in: query
      description: The taxonomy UUID
      required: false
      schema:
        type: string
        example: aa17223a-471c-4eb7-9ff5-7800fd023960
    list:
      name: list
      in: query
      description: List of Scope, Org, or Taxonomies used in the result set
      required: false
      schema:
        type: array
        items:
          type: string
          example: scopes,orgs,taxonomies
    limit:
      name: limit
      in: query
      description: Limit the number of results
      required: false
      schema:
        type: integer
        example: 100
    page:
      name: page
      in: query
      description: The page number
      required: false
      schema:
        type: integer
        example: 1
  schemas:
    Authorization:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
        scope:
          type: string
    UnauthorizedResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Unauthorized'
    ExpiredTokenResponse:
      type: object
      properties:
        message:
          type: string
          example: 'token expired'
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Success'
    ListResponse:
      type: object
      properties:
        count:
          type: integer
          example: 1500
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 100
        data:
          type: array
          items:
            $ref: '#/components/schemas/IDAndName'
    ActivityResponse:
      type: object
      properties:
        count:
          type: integer
          example: 1500
        queryString:
          type: string
          description: The query string used to filter the activities
          example: date=2021-01
        startDate:
          type: string
          description: ISO 8601 date
          example: 2021-01-01T00:00:00Z
        endDate:
          type: string
          description: ISO 8601 date
          example: 2021-01-31T23:59:59Z
        CO2e:
          type: string
          description: The total CO2e of all activities categorized to a GHG Scope, in `CO2eUnit`
          example: '1234.5678'
        uncategorizedCO2e:
          type: string
          description: The total CO2e of all activities *not* categorized to a GHG Scope, in `CO2eUnit`
          example: '1.2345678'
        CO2eUnit:
          type: string
          description: The unit of CO2e. For example "kg"
          example: kg
        scopes:
          description: A list of GHG Scopes used in the result set
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        orgs:
          description: A list of Orgs used in the result set
          type: array
          items:
            $ref: '#/components/schemas/Org'
        taxonomies:
          description: A list of Taxonomies used in the result set
          type: array
          items:
            $ref: '#/components/schemas/Taxonomy'
    UUID:
      type: string
      format: UUID
    SyncId:
      type: string
      example: 'sync123'
    IDAndName:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: 'Name'
    CreatedUpdated:
      type: object
      properties:
        created:
          type: string
          description: ISO 8601 date
          example: 2021-01-01T00:00:00Z
        updated:
          type: string
          description: ISO 8601 date
          example: 2021-01-31T23:59:59Z
    BaseNode:
      allOf:
        - $ref: '#/components/schemas/IDAndName'
        - $ref: '#/components/schemas/CreatedUpdated'
    Date:
      type: string
      description: ISO 8601 date
      example: 2021-01-01T00:00:00Z
    StartEndDate:
      allOf:
        - properties:
            startDate:
              $ref: '#/components/schemas/Date'
            endDate:
              $ref: '#/components/schemas/Date'
    FootprintCO2e:
      type: object
      properties:
        A1:
          type: string
          example: '1200.0'
        A2:
          type: string
          example: '30.0'
        A3:
          type: string
          example: '4.0'
        A4:
          type: string
          example: '0.5'
        B1:
          type: string
          example: '0.06'
        B2:
          type: string
          example: '0.007'
        B3:
          type: string
          example: '0.0008'
        B4:
          type: string
          example: ''
        B5:
          type: string
          example: ''
        C1:
          type: string
          example: ''
        C2:
          type: string
          example: ''
        C3:
          type: string
          example: ''
        C4:
          type: string
          example: ''
        D:
          type: string
          example: ''
    FootprintCO2eComputed:
      properties:
        totalCarbonFootprint:
          type: string
          example: '1234.5678'
        productCarbonFootprint:
          type: string
          example: '1234.0'
        upstream:
          type: string
          example: '1230.0'
        direct:
          type: string
          example: '4.0'
        downstream:
          type: string
          example: '0.5678'
        A1_A3:
          type: string
          example: '1234.0'
    EditFootprint:
      type: object
      description: 'Using `dataSource: external` allows setting certain `footprint.CO2e` values. The values are computed all other `dataSource`s.'
      properties:
        CO2e:
          $ref: '#/components/schemas/FootprintCO2e'
    Footprint:
      type: object
      properties:
          CO2e:
            allOf:
              - $ref: '#/components/schemas/FootprintCO2eComputed'
              - $ref: '#/components/schemas/FootprintCO2e'
    Activity:
      allOf:
        - $ref: '#/components/schemas/BaseNode'
        - type: object
          properties:
            description:
              type: string
            quantity:
              type: number
              example: 150
            unit:
              type: string
              example: 'kg'
            CO2e:
              type: string
              example: '1234.5678'
            UpstreamCO2e:
              type: string
              example: '1234'
            DownstreamCO2e:
              type: string
              example: '0.5678'
            product:
              properties:
                uuid:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                  example: 'Product Name'
            scope:
              properties:
                uuid:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                  example: 'Scope 2: Electricity'
            taxonomy:
              properties:
                uuid:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                  example: 'Material'
            org:
              properties:
                uuid:
                  $ref: '#/components/schemas/UUID'
                name:
                  type: string
                  example: 'Org Unit'
        - $ref: '#/components/schemas/StartEndDate'
    ProductDataSource:
      type: string
      example: 'model'
      enum:
        - model
        - external
        - database
    NewProduct:
      allOf:
        - type: object
          properties:
            dataSource:
              $ref: '#/components/schemas/ProductDataSource'
            name:
              type: string
              example: 'Product Name'
            description:
              type: string
              example: 'A descriptive description'
            sku:
              type: string
              example: 'SKU123'
            syncId:
              $ref: '#/components/schemas/SyncId'
            cpcCode:
              type: string
              example: 'CPC123'
            footprint:
              $ref: '#/components/schemas/EditFootprint'
            dataQualityIndicators:
              $ref: '#/components/schemas/DataQualityIndicatorsEdit'
            taxonomy:
              allOf:
                - $ref: '#/components/schemas/Taxonomy'
                - properties:
                    name:
                      type: string
                      example: 'Material'
            geoLocation:
              allOf:
                - $ref: '#/components/schemas/IDAndName'
                - properties:
                    name:
                      type: string
                      example: 'Pittsburgh, PA'
            location:
              allOf:
              - $ref: '#/components/schemas/IDAndName'
              - properties:
                  name:
                      type: string
                      example: 'Pittsburgh Office'
        - $ref: '#/components/schemas/StartEndDate'
    EditProduct:
      allOf:
        - properties:
            uuid:
              $ref: '#/components/schemas/UUID'
        - $ref: '#/components/schemas/NewProduct'
    Product:
      allOf:
        - $ref: '#/components/schemas/EditProduct'
        - type: object
          properties:
            productImage:
              type: string
              example: 'https://app.variable.global/uploads/image.jpg'
            footprint:
              $ref: '#/components/schemas/Footprint'
            dataQualityRating:
              $ref: '#/components/schemas/DataQualityRating'
            dataQualityIndicators:
              $ref: '#/components/schemas/DataQualityIndicators'
        - $ref: '#/components/schemas/CreatedUpdated'
    Material:
      allOf:
        - $ref: '#/components/schemas/Product'
        - properties:
            name:
              type: string
              example: 'Material Name'
            supplier:
              $ref: '#/components/schemas/Company'
    Company:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        syncId:
          $ref: '#/components/schemas/SyncId'
        name:
          type: string
          example: 'Company Name'
    NewSupplier:
      allOf:
        - $ref: '#/components/schemas/Company'
        - properties:
            name:
              type: string
              example: 'Supplier Name'
            syncId:
              $ref: '#/components/schemas/SyncId'
    Supplier:
      allOf:
        - $ref: '#/components/schemas/NewSupplier'
        - properties:
            connected:
              type: boolean
              example: true
    NewInput:
      properties:
        syncId:
          $ref: '#/components/schemas/SyncId'
        quantity:
          type: number
          example: 150
        unit:
          type: string
          example: 'kg'
        order:
          type: number
          example: 1
        material:
          properties:
            uuid:
              $ref: '#/components/schemas/UUID'
            name:
              type: string
              example: 'Material name'
        block:
          properties:
            uuid:
              $ref: '#/components/schemas/UUID'
            name:
              type: string
              example: 'Block name'
        lifecycleStage:
          $ref: '#/components/schemas/LifecycleStage'
    EditInput:
      allOf:
        - properties:
            uuid:
              $ref: '#/components/schemas/UUID'
        - $ref: '#/components/schemas/NewInput'
    ReturnedInput:
      allOf:
        - $ref: '#/components/schemas/EditInput'
        - $ref: '#/components/schemas/CreatedUpdated'
        - properties:
            CO2e:
              type: string
              example: '1234.5678'
    Block:
      allOf:
        - $ref: '#/components/schemas/BaseNode'
        - type: object
          properties:
            sources:
              type: array
              items:
                $ref: '#/components/schemas/Product'
    LifecycleStage:
      type: object
      properties:
        code:
          type: string
          example: A1
        name:
          type: string
          example: 'Materials'
    Scope:
      type: object
      properties:
        uuid:
          type: string
          format: UUID
        name:
          type: string
          example: 'Scope 2: Electricity'
    Taxonomy:
      type: object
      properties:
        uuid:
          type: string
          format: UUID
        name:
          type: string
          example: 'Electricity'
        slug:
          type: string
          example: 'electricity'
        path:
          type: string
          example: 'energy/electricity'
    Unit:
      type: object
      properties:
        code:
          type: string
          example: "kg"
        name:
          type: string
          example: 'Kilogram'
        type:
          type: string
          example: 'weight'
    Org:
      type: object
      properties:
        uuid:
          type: string
          format: UUID
        name:
          type: string
          example: 'Org Unit'
    Location:
      type: object
      properties:
        uuid:
          type: string
          format: UUID
        name:
          type: string
          example: 'Pittsburgh Office'
        type:
          type: string
          example: 'office'
        geoLocation:
          $ref: '#/components/schemas/GeoLocation'
    GeoLocation:
      type: object
      properties:
        uuid:
          type: string
          format: UUID
        shortName:
          type: string
          example: 'Pittsburgh'
        googleMapsId:
          type: string
          example: 'ChIJA4UGSG_xNIgRNBuiWqEV-Y0'
        locationType:
          type: string
          example: 'APPROXIMATE'
        formattedAddress:
          type: string
          example: 'Pittsburgh, PA, USA'
        countryCode:
          type: string
          example: 'US'
        latitude:
          type: number
          example: 40.44062479
        longitude:
          type: number
          example: -79.9958864
        bounds:
          type: object
          properties:
            northeast:
              $ref: '#/components/schemas/LatLon'
            southwest:
              $ref: '#/components/schemas/LatLon'
    LatLon:
      type: object
      properties:
        latitude:
          type: number
          example: 40.44062479
        longitude:
          type: number
          example: -79.9958864
    DataQualityIndicatorsEdit:
      type: object
      properties:
        documentationYear:
          type: number
          example: 2019
        coveragePercent:
          type: number
          example: 80
        specificPercent:
          type: number
          example: 40
        technologicalDQR:
          type: number
          example: 1
        geographicalDQR:
          type: number
          example: 1
        completenessDQR:
          type: number
          example: 1
        reliabilityDQR:
          type: number
          example: 1
    DataQualityIndicators:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataQualityIndicatorsEdit'
        - properties:
            averagePercent:
              type: number
              example: 60
            temporalDQR:
              type: number
              example: 3
              description: |
                This is calculated based on the `documentationYear` \
                1 = this year (2024) \
                2 = previous 4 years (2020 - 2023) \
                3 = 5+ years old (2019 and older)
    DataQualityRating:
      type: number
      example: 1.4
    KgCO2e:
      type: string
#      required: true
      example: 1234.5678
    UTC_ISO_8601:
      type: string
#      required: true
      format: date-time
    ISO_3166_CC:
      type: string
      example: NO
    ISO_3166_2_Subdivision_Code:
      type: string
      example: US-PA
    DataQualityRatingValue:
      type: number
      example: 2
      description: number from 1 - 3
    ProductOrSectorSpecificRule:
      type: array
      properties:
        operator:
          type: string
        ruleNames:
          type: array
    SecondaryEmissionFactorSources:
      type: array
      properties:
        name:
          type: string
        version:
          type: string
    PactDataQualityIndicators:
      properties:
        coveragePercent:
          type: number
          example: 80
        technologicalDQR:
          $ref: '#/components/schemas/DataQualityRatingValue'
        temporalDQR:
          $ref: '#/components/schemas/DataQualityRatingValue'
        geographicalDQR:
          $ref: '#/components/schemas/DataQualityRatingValue'
        completenessDQR:
          $ref: '#/components/schemas/DataQualityRatingValue'
        reliabilityDQR:
          $ref: '#/components/schemas/DataQualityRatingValue'
    PactProductFootprint:
      type: object
      properties:
        id:
          type: string
#          required: true
          example: 123
        specVersion:
          type: string
#          required: true
          example: 2.1.0
        precedingPfIds:
          type: array
#          required: true
        version:
          type: string
#          required: true
          example: 1
        status:
          type: string
          example: Active
        statusComment:
          type: string
        validityPeriodStart:
          $ref: '#/components/schemas/UTC_ISO_8601'
        validityPeriodEnd:
          $ref: '#/components/schemas/UTC_ISO_8601'
        companyName:
          type: string
#          required: true
        companyIds:
          type: array
#          required: true
        productIds:
          type: array
#          required: true
        productCategoryCpc:
          type: string
#          required: true
        productNameCompany:
          type: string
#          required: true
        productDescription:
          type: string
#          required: true
        comment:
          type: string
#          required: true
        pcf:
          $ref: '#/components/schemas/PactProductCarbonFootprint'
        extensions:
          type: array
        created:
          $ref: '#/components/schemas/UTC_ISO_8601'
        updated:
          $ref: '#/components/schemas/UTC_ISO_8601'
    PactProductCarbonFootprint:
      type: object
#      required: true
      properties:
        declaredUnit:
          type: string
#          required: true
          example: 'kilogram'
        unitaryProductAmount:
          allOf:
            - $ref: '#/components/schemas/KgCO2e'
#            - required: true
        pCfExcludingBiogenic:
          allOf:
            - $ref: '#/components/schemas/KgCO2e'
#            - required: true
        pCfIncludingBiogenic:
          $ref: '#/components/schemas/KgCO2e'
        fossilGhgEmissions:
          allOf:
            - $ref: '#/components/schemas/KgCO2e'
#            - required: true
        fossilCarbonContent:
          allOf:
            - $ref: '#/components/schemas/KgCO2e'
#            - required: true
        biogenicCarbonContent:
          allOf:
            - $ref: '#/components/schemas/KgCO2e'
#            - required: true
        dLucGhgEmissions:
          $ref: '#/components/schemas/KgCO2e'
        landManagementGhgEmissions:
          $ref: '#/components/schemas/KgCO2e'
        otherBiogenicGhgEmissions:
          $ref: '#/components/schemas/KgCO2e'
        iLucGhgEmissions:
          $ref: '#/components/schemas/KgCO2e'
        biogenicCarbonWithdrawal:
          $ref: '#/components/schemas/KgCO2e'
        aircraftGhgEmissions:
          $ref: '#/components/schemas/KgCO2e'
        characterizationFactors:
          type: string
#          required: true
          example: AR6
        ipccCharacterizationFactorsSources:
          type: array
#          required: true
          example: [ 'AR6' ]
        crossSectoralStandardsUsed:
          type: array
#          required: true
          example: [ 'GHG Protocol Product standard' ]
        productOrSectorSpecificRules:
          $ref: '#/components/schemas/ProductOrSectorSpecificRule'
        biogenicAccountingMethodology:
          type: string
          example: 'GHGP'
        boundaryProcessesDescription:
          type: string
        referencePeriodStart:
          $ref: '#/components/schemas/UTC_ISO_8601'
        referencePeriodEnd:
          $ref: '#/components/schemas/UTC_ISO_8601'
        geographyCountrySubdivision:
          $ref: '#/components/schemas/ISO_3166_2_Subdivision_Code'
        geographyCountry:
          $ref: '#/components/schemas/ISO_3166_CC'
        geographyRegionOrSubregion:
          type: string
          example: "Europe"
        secondaryEmissionFactorSources:
          $ref: '#/components/schemas/SecondaryEmissionFactorSources'
        exemptedEmissionsPercent:
          type: number
#          required: true
          example: 2
        exemptedEmissionsDescription:
          type: string
#          required: true
        packagingEmissionsIncluded:
          type: boolean
#          required: true
        packagingGhgEmissions:
          $ref: '#/components/schemas/KgCO2e'
        allocationRulesDescription:
          type: string
        uncertaintyAssessmentDescription:
          type: string
        primaryDataShare:
          type: number
          example: 82
        dqi:
          $ref: '#/components/schemas/PactDataQualityIndicators'
        # assurance:
        #   type: array
    PactListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PactProductFootprint'

security:
  - basicAuth: [ ]
  - bearerAuth: [ ]
  - oAuthNoScopes: [ ]
